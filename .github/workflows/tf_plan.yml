name: Terraform plan
on:
  workflow_call:
    inputs:
      aws_default_region:
        description: AWS region for the state file
        type: string
        required: false
        default: ap-southeast-2
      tf_github_owner:
        description: Terraform GitHub repo owner
        type: string
        required: false
        default: dpc-sdp

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ inputs.aws_default_region }}
  EC_API_KEY: ${{ secrets.EC_API_KEY }}
  GITHUB_OWNER: ${{ inputs.tf_github_owner }}
  GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
  SUMOLOGIC_ACCESSID: ${{ secrets.SUMOLOGIC_ACCESSID }}
  SUMOLOGIC_ACCESSKEY: ${{ secrets.SUMOLOGIC_ACCESSKEY }}
  TF_LOG: DEBUG

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Initialize Terraform
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: |
          set +e
          terraform plan -no-color -input=false -out=tfplan -detailed-exitcode
          exitcode="$?"
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

      - name: Check Terraform Plan
        if: ${{ failure() && steps.plan.outputs.exitcode == 2 }}
        run: |
          echo "Terraform plan returned ${{ steps.plan.outputs.exitcode }}"
          echo "2 = Succeeded with non-empty diff (changes present) "

      - name: Render plan diff
        id: show
        if: ${{ always() && steps.plan.outputs.exitcode == 2 }}
        run: terraform show -no-color tfplan > tfplan.txt

      - name: Render plan for PR comment
        id: tf_output
        if: ${{ always() && steps.plan.outputs.exitcode == 2 }}
        run: |
          {
            echo 'PLAN_OUTPUT<<EOF'
            cat tfplan.txt
            echo EOF
          } >> "$GITHUB_OUTPUT"


      - uses: actions/github-script@v6
        if: (${{ always() && steps.plan.outputs.exitcode == 2 }}) && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${{ steps.tf_output.outputs.PLAN_OUTPUT }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
